# -*- coding: utf-8 -*-
"""movies_data_analytics.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uFwxdNuFtnmELbn6GCoqc_R2ugXAp6Jz

# **Exploratory Data Analysis of Movies Dataset**

## **Tasks :**

1. The Best and Worst Movies in terms of Budget , Revenue , Proft, Ratings ....

2. Find Movies That Have More Than 5 Milions of Budget And Sorting Them by ROI

3. Top Movies Sorted Based  on Highest Revenue

4. Top Movies Sorted Based Lowest Profit

5. Top Movies Sorted Based Lowest ROI and Minimum Budget of 5 million

6. Top Movies Sorted Based Lowest Rating and Minumum Votes of 5000 and Miniumum Budget of 5 million

7. Top Movies Sorted Based On Popularity

8. Action or Thriller Movies with Original Lanaguage English & Minimum Rating of 7.5 (Most Recent)

9. Get Wordcloud of Title

10. Get WordCloud of Tagline

11. Are Franchise More Successful ?
(Franchise movies are a type of film that is part of a series or collection of movies that are related to each other through a shared universe, characters, or storylines. These movies are often produced by major studios and are intended to be part of a larger brand or intellectual property.)

12. The Most Successful Franchise Movies

13. The Most Successful Directors
"""

#import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
from wordcloud import WordCloud

#read the dataframe
df= pd.read_csv('/content/movies_complete.csv')

df.head()

#check info of dataframe
df.info()

#summary statistics of dataframe
df.describe()

"""# Best and Worst Movies"""

#Best Movies in terms of budget, revenue, vote count, and popularity
col = ['budget_musd','revenue_musd','vote_count','vote_average','popularity']

for i in col:
  print(df[df[i]==df[i].max()][['title',i]])

#Worst Movies in terms of budget, revenue, vote count, and popularity
for i in col:
  print(df[df[i]==df[i].min()][['title',i]])

#calculating profit and ROI
df['profit']=df['revenue_musd']-df['budget_musd']
df['roi']=df['profit']/df['budget_musd']

#checking new columns
df.head()

"""# Movies That Have More Than 5 Milions of Budget sorted by ROI"""

# Movies That Have More Than 5 Milions of Budget sorted by ROI
print(df[df['budget_musd']>5].sort_values(by='roi',ascending=False)[['title','roi']])

df.sort_values(by='revenue_musd',ascending=False)[['title','revenue_musd']].head(10)

df.sort_values(by='profit')

"""# Movies sorted based on a condition"""

#function for sorting movies on different conditions
def highest_lowest(by, ascending_order=False, budget=0, votes=0):
  return df[(df['budget_musd']>budget) & (df['vote_count']>votes)].sort_values(by=by,ascending=ascending_order)[['title',by]]

# Movies That Have More Than 5 Milions of Budget sorted by ROI
highest_lowest(by='roi', ascending_order=False, budget=5, votes=0)

# Movies sorted by highest revenue
highest_lowest(by='revenue_musd', ascending_order=False, budget=0, votes=0)

# Movies sorted by lowest profit
highest_lowest(by='profit', ascending_order=True, budget=0, votes=0)

# Movies sorted by highest popularity
highest_lowest(by='popularity', ascending_order=False, budget=0, votes=0)

# Movies sorted by lowest rating and minumum votes of 5000 and miniumum budget of 5 million
highest_lowest(by='vote_average', ascending_order=True, budget=5, votes=5000)

"""# Action or Thriller Movie with original language English and minimum Rating of 7.5"""

#creating filters
genres_1 = df['genres'].str.contains('Action')
genres_2 = df['genres'].str.contains('Thriller')
original_language = df['original_language']=='en'
rating = df['vote_average']>=7.5

#top movies based on the filters
best_movies = df[genres_1 & genres_2 & original_language & rating].sort_values(by='release_date', ascending=False).set_index('id')
best_movies[['title','release_date', 'genres', 'budget_musd', 'revenue_musd','vote_count', 'vote_average', 'popularity', 'profit', 'roi']].head(10)

"""# WordCloud"""

#wordcloud of title
wordcloud=WordCloud(collocations=False, background_color='white').generate(' '.join(df['title']))
plt.figure(figsize=(12,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')

#removing null values
df['tagline']=df['tagline'].fillna('')

#wordcloud of tagline
wordcloud=WordCloud(collocations=False, background_color='white').generate(' '.join(df['tagline']))
plt.figure(figsize=(12,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')

"""# Are Franchises successful?"""

#counting franchises in dataframe
df['belongs_to_collection'].value_counts().head(20)

#summarising franchises based on budget, revenue, rating, popularity and votes
franchises=df.groupby(df['belongs_to_collection']).agg({"title":"count", "budget_musd": ["sum", "mean"], "revenue_musd": ["sum", "mean"],"vote_average": "mean", "popularity": "mean", "roi": "median", "vote_count": "mean"})
franchises

franchises

#Top franchises by total number of movies
franchises.nlargest(10, ("title", "count"))

# Top 20 franchises by sum of revenue
franchises.nlargest(20, ("revenue_musd", "sum"))

# Top 20 franchises by sum of budget
franchises.nlargest(20, ("budget_musd", "sum"))

# Top 20 franchises by mean vote average
franchises[franchises[("vote_count", "mean")] >= 1000].nlargest(20, ("vote_average", "mean"))

"""# Top Directors"""

#counting directors
directors_movies=df['director'].value_counts()
directors_movies.head(10)

#top directors based on total revenue generated
directors_revenue=df['revenue_musd'].groupby(df['director']).sum()
directors_revenue.sort_values(ascending=False).head(10)